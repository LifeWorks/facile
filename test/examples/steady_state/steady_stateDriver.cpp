//
// File generated by Facile version 0.53
//

#include <stdio.h>
#include <math.h>

// Custom header file
#include "steady_stateCVODE.h"

int main() {

  double ivalues[NEQ];
  double ode_rate_constants[3];

  // initial values (free nodes only)
  ivalues[0] = 4; // X
  ivalues[1] = 5; // Y
  ivalues[2] = 2; // Z


  // rate constants and constant expressions
  realtype k_sinkx          = ode_rate_constants[0] = 1;
  realtype k_sinky          = ode_rate_constants[1] = 3.3;
  realtype k_sinkz          = ode_rate_constants[2] = 2.2;

  // time interval and sample times
  realtype t0 = 0;
  realtype tf = 1000.0;

  std::vector<realtype> tv;
  realtype TVec_t0 = t0;
  realtype TVec_tf = tf;
  realtype TVec_dt = 0.01;
  unsigned int num_samples = ceil(TVec_tf / TVec_dt) + 1;
  for(unsigned int i=0; i < num_samples; i++) {
    realtype next_value = TVec_t0 + realtype(i) * TVec_dt;
    if (next_value <= TVec_tf) tv.push_back(next_value);
  };

  // ode events
  std::vector<realtype> ode_events;
  ode_events.push_back(0);
  ode_events.push_back(50.0);
  ode_events.push_back(0);
  ode_events.push_back(-90);
  ode_events.push_back(0);
  ode_events.push_back(300);
  ode_events.push_back(0);
  unsigned int num_ode_events = ode_events.size();
  std::vector<int>      event_flags;
  std::vector<realtype> event_times;

  // options
  std::vector<realtype> ode_options(NUM_ODE_OPTIONS,-1);
  ode_options[ODE_OPTION_RELTOL] = 1.000000e-06;
  ode_options[ODE_OPTION_ABSTOL] = 1.000000e-12;
  ode_options[ODE_OPTION_INITSTEP] = -1;
  ode_options[ODE_OPTION_MINSTEP] = -1;
  ode_options[ODE_OPTION_MAXSTEP] = -1;
  ode_options[ODE_OPTION_SS_TIMESCALE] = 100;
  ode_options[ODE_OPTION_SS_RELTOL] = 0.0001;
  ode_options[ODE_OPTION_SS_ABSTOL] = 1e-06;

  // call solver
  std::vector<realtype> aT;
  std::vector<realtype> aY;

  cvode_sim_steady_state(ivalues, ode_rate_constants, tv, aT, aY,
                                ode_options, ode_events, event_flags, event_times);

  // print output to screen
  cvode_sim_print_output(aT, aY);

  return (0);
}
